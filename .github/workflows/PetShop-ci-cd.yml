name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # ================================================================
  # 1️⃣ TEST JOB (run first)
  # ================================================================
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Client)
        working-directory: PetShop/client
        run: npm ci

      - name: Run tests (Client)
        working-directory: PetShop/client
        run: npm test -- --watchAll=false --passWithNoTests

      - name: Install dependencies (Server)
        working-directory: PetShop/server
        run: npm ci

      - name: Run tests (Server)
        working-directory: PetShop/server
        run: npm test -- --watchAll=false --passWithNoTests

  # ================================================================
  # 2️⃣ BUILD & PUSH JOB
  # ================================================================
  build-and-push:
    runs-on: ubuntu-latest
    needs: test            # ✅ Only build & push if tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Build & Push Client (Prod) ---
      - name: Build & Push Client Image (Prod)
        uses: docker/build-push-action@v5
        with:
          context: ./PetShop/client
          file: ./PetShop/client/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/petshop-client:latest

      # --- Build & Push Server (Prod) ---
      - name: Build & Push Server Image (Prod)
        uses: docker/build-push-action@v5
        with:
          context: ./PetShop/server
          file: ./PetShop/server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/petshop-server:latest

      # --- Build & Push Client (Dev) ---
      - name: Build & Push Client Image (Dev)
        uses: docker/build-push-action@v5
        with:
          context: ./PetShop/client
          file: ./PetShop/client/Dockerfile.dev
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/petshop-client:dev

      # --- Build & Push Server (Dev) ---
      - name: Build & Push Server Image (Dev)
        uses: docker/build-push-action@v5
        with:
          context: ./PetShop/server
          file: ./PetShop/server/Dockerfile.dev
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/petshop-server:dev

  # ================================================================
  # 3️⃣ DEPLOY JOB (optional)
  # ================================================================
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push     # <-- Deploy only after images are pushed
  #   steps:
  #     - name: SSH to VM & deploy
  #       uses: appleboy/ssh-action@v1.1.0
  #       with:
  #         host: ${{ secrets.VM_HOST }}
  #         username: ${{ secrets.VM_USER }}
  #         key: ${{ secrets.VM_SSH_KEY }}
  #         script: |
  #           cd /home/${{ secrets.VM_USER }}
  #           if [ ! -d "Typescript_Projects" ]; then
  #             git clone https://github.com/TTHai-Git/Typescript_Projects
  #           fi
  #           cd Typescript_Projects/PetShop
  #           git reset --hard
  #           git pull origin main
  #           echo "${{ secrets.CLIENT_ENV }}" > client/.env
  #           echo "${{ secrets.SERVER_ENV }}" > server/.env
  #           docker compose -f PetShop-docker-compose.yml --profile dev down
  #           docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/petshop-client:dev || true
  #           docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/petshop-server:dev || true
  #           docker pull ${{ secrets.DOCKERHUB_USERNAME }}/petshop-client:dev
  #           docker pull ${{ secrets.DOCKERHUB_USERNAME }}/petshop-server:dev
  #           docker compose -f PetShop-docker-compose.yml --profile dev up -d
  #           docker image prune -f
